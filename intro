[Distributed Systems in One Lesson by Tim Berglund >> https://www.youtube.com/watch?v=Y6Ev8GIlbxc ]
[https://towardsdatascience.com/cap-theorem-and-distributed-database-management-systems-5c2be977950e]
[Scaling Databases - Web Development >> https://www.youtube.com/watch?v=dkhOZOmV7Fo]

දත්ත ගබඩා වල ඉහල දත්ත හුවමාරු තදබදයක් ඇති විට එයින් ඇතිවන දෝෂ මගහැරීමට විවිධ ක්‍රම භාවිතා කෙරේ.

දත්ත හුවමාරු අවස්ථා තුනකට වර්ග කල හැක.
1.ගබඩාවේ දත්ත ලිවිම.
2.ගබඩාවේ දත්ත කියැවීම.
3.ගබඩාවේ දත්ත ලිවිම/කියැවීම.

ඉහත අවස්ථා තුනෙන් වැඩිපුරම සිදු වන්නේ ගබඩාවේ දත්ත ලිවිම වඩා කියැවීමයි. එම නිසා මෙම ගුණය භාවිතා කර දත්ත හුවමාරු 
තදබදයට විසදුමක් පහත පරිදි ඉදිරිපත් කල හැක.ෙහි මුලික සංකල්පය වනුයේ දත්ත ලියවීමට එක් දත්ත ගබඩාවක්(M) ද දත්ත කියවීම
සඳහා වෙනත් දත්ත ගබඩා කීපයක් (S1,S2,S3,....Sn) භාවිතා කිරීමයි.  
1. ලියැවීමට පැමිණෙන ඉල්ලීම්(request) දත්තය M දත්ත ගබඩාවේ ලියා, අවස්ථාව අනුව S1,S2,S3,....Sn යන දත්ත ගබඩා කීපයකද 
එම අයුරෙන්ම ගබඩා කරයි.
2. දත්තය කියවීමට පැමිණෙන ඉල්ලීම(request) දත්ත ගබඩා n සංඛ්‍යාවෙන් අඩු තදබදයක් ඇති දත්ත ගබඩාව වෙත යොමු කරයි.
මෙම ක්‍රමය භාවිතයෙන් දත්ත හුවමාරුවේ තදබදය යම්තාක් දුරකට අඩු කල හැකි නමුත් මෙමගින් ලියැවීමේ තදබදය අඩු නොකෙරේ.
M හි ලියැවෙන දත්තයක් අවස්ථාව අනුව S1,S2,S3,....Sn ලියවෙන නිසා යම් අවස්ථාවලදී ලියවුනු දත්තයක් කියවීමට ප්‍රමාද වීම
මෙම ක්‍රමය භාවිතය මගින් ඇතිවන දෝෂයකි(replication lag).

දත්ත ගබඩාවේ විශාල දත්ත ප්‍රමාණයක් ඇති පහත දුෂ්කරතා හට ගත හැක.
1. තවත් දත්ත ලියවීමට භාවිතා කරන දෘඩකාංග*ye වල ඉඩ අවසන් වීම.
2. දත්ත කියැවීමේදී විශාල දත්ත ප්‍රමාණයක් විශ්ලේෂණය කිරීමට සිදු වීම.

මෙම දුෂ්කරතා මගහැරීමට sharding නම් ක්‍රමයක් භාවිතා කරයි.
මෙහිදී කෙරෙනුයේ (M)දත්ත ගබඩාව , ගබඩා කෙරෙන දත්තයන්ගේ ගුණ අනුව (M වර්ගයේ)දත්ත ගබඩා කීපයක(M1,M2,...,Mn ) 
එකතුවක් (M=M+M2+...+Mn)  ලෙස සැකසීමයි. මෙම දත්ත ගබඩා විවිධ server වල විවිධ ස්ථාන වල පිහිටා තිබිය හැකිය.

ගබඩා කෙරෙන දත්තයන්ගේ ගුණ වර්ග කිරීම.
උදාහරණ:
    age =(10-20)     > දත්ත M1 දත්ත ගබඩාවේ ලියැවීම.
    age =(21-30)     > දත්ත M5 දත්ත ගබඩාවේ ලියැවීම.
    age =(31-40)     > දත්ත M3 දත්ත ගබඩාවේ ලියැවීම.
     ..................................................................................
     ..................................................................................
    age =(n - (n+k)) > දත්ත Mq  දත්ත ගබඩාවේ ලියැවීම.

shard ක්‍රමය මගින් ඇතිවිය හැකි දුෂ්කරතා.
1. දත්ත කියැවීම්/ලියැවීම් කරන විධාන(query) සංකීර්ණ වීම. 
2. සම්පුර්ණ දත්ත ගබඩාවෙන් යම් දත්ත තීරුවක(column) යම් පරාසයක් සෙවීමේදී සියලුම (M1,M2,...,Mn ) දත්ත ගබඩා විශ්ලේෂණය 
වන බැවින් shard ක්‍රමයේ වාසිය මෙම අවස්ථාවේදී ලබාගත නොහැක. 
3. දත්ත ගබඩාවේ වගු අතර සම්බන්ධතා(join) ඇතිකරගැනීම සංකීර්ණ වීම සහ ඇතැම් අවස්ථා වලදී සම්පුර්ණයෙන්ම කල නොහැකි වීම. 

@data replication දත්ත ප්‍රතිරුප කරණය වීමේදී සැලකිය යුතු කරුණු.
ඉහත sharding යටතේ එකම දත්තයක්, දත්ත-ගබඩා කීපයක ගබඩා කිරීම මගින් භාවිතයට පහසුව මෙන්ම, එහි ආරක්ෂාවටත් යෝග්‍ය වේ. 

මෙහිදී අපගේ යම් ලියන ලද දත්තයක් යාවත්කාලින කිරීමේදී එම දත්තය සදහා ප්‍රතිරුප කරණය සිදු වූ සියලු දත්ත ගබඩා වල තෝරා එම 
දත්තය යාවත්කාලින කල යුතුය. සමහරක් අවස්ථා වලදී යම් යම් දෝෂ, බිඳවැටුම් සහ තදබද  නිසා ඉහත දත්තය සියලුම යාවත්කාලින කිරීමට
නොහැකි වූ විටදී එම දත්තය කියැවිමේදී යාවත්කාලින නොවූ දත්තයක් ඉදිරිපත් විය හැකිය. ඒ මක් නිසාද යත් දත්තයක් කියැවිමේ ප්‍රතිරුප 
කරණය වූ සියලු දත්ත නොලියවා අවස්ථාව අනුව පහසු දත්තයක් කියවන බැවිනි. 

ඉහත දත්ත ප්‍රතිරුප කරණයට අදාලව කියවීමක හෝ ලියැවිමක consistent මට්ටම දක්වන අසමනතාවක් පහත දැක්වේ.   
R + W > N 
 W - යාවත්කාලින කල ලියැවීම් ගණන 
 R - කියැවීම් ගණන
 N - දත්තයේ පිටපත් ගණන  (replicas ) 

 
@capTheorem 
 capTheorem  යන්නෙන් ඉදිරිපත් කරනු ලබන්නේ Distributed Systems එකක තිබිය යුතු ගුණ තුනක් සම්බන්දවය.
  [img > https://cdn-images-1.medium.com/max/1600/1*WPnv_6sG9k4oG3S1A09MDA.jpeg ]

1.Consistency.
  කියවීම් ඉල්ලිමකදී(read rq) අදාල දත්තයේ පිටපත් වලින් අවසාන වරට යාවත්කාලින වූ දත්තය ප්‍රතිචාර(rs) ලෙස  දැක්වීම මෙම ගුණය
  ඉහල පද්ධතියක ලක්ෂණයයි. 
  පහත රුපයෙන් දැක්වෙන්නේ Consistency ගුණය අඩු පද්ධතියක දෝෂයක් හටගන්නා ආකාරයයි. එහි යාවත්කාලින  වේලාවන් පිලිබඳ අවධානය යොමු කරන්න. 
  [img > https://cdn-images-1.medium.com/max/1116/1*UnG2G7_h0kqI9IHtnUk3qg.png ]

2.Availability
 කියැවීම් හා ලියැවීම් සිදුකිරීමේදී බිඳවැටීම්, තදබද නැතිව පහසුවෙන්, අඛණ්ඩව(ඕනෑම වෙලාවක) සිදු වීම මෙම ගුණය ඉහල පද්ධතියක ලක්ෂණයයි. මෙම ගුණය   
 පහත සිතියමේ දැක්වෙනුයේ Availability ගුණය අඩු පද්ධතියක යම් වේලාවකදී දෝෂයක් හටගත් අවස්ථාවකි. 
 [img > https://cdn-images-1.medium.com/max/873/1*ABrjUrZAY6V1hEkFPYvC7A.png ]

3.Partition Tolerance.
 විවිධ දත්ත-ගබඩා භාවිතයේදී සිදුවන ප්‍රමාද දෝෂ , බිදවැටීම් ආදිය දරාගනිමින් පද්ධතියේ ක්‍රියාකාරිත්වය පවත්වාගෙන යා හැකි පද්ධතියක
 මෙම ගුණය ඉහල යැයි සැලකිය හැකිය. වර්තමානයේ දත්ත පද්ධති වල මෙම ගුණය අනිවාර්ය අංගයක් ලෙස සැලකේ.
 පහත සිතියමේ දැක්වෙනුවේ එක් Node එකක් බිඳවැටී ඇති අවස්ථාවකි. Partition Tolerance ගුණයෙන් ඉහල පද්ධතියක් මෙවැනි 
 අවස්ථාවකදී පද්ධතියේ ක්‍රියාකාරිත්වය අඛණ්ඩව පවත්වාගෙන යයි. 
 [img > https://cdn-images-1.medium.com/max/1091/1*qVoJNWH1osbrnOizRivF1A.png ]
 
 ඉහත cap Theorem යේ ගුණ තුනම ආවරණය කරන කොපි-කඩේ උදාහරණයක් ඇත.
  % two studens sitting at coffee shop with same project copy
  1.shared writing project (consistent)  
  % coffe shop closes
  2. synchoronizing over the phone (available)  
  % battery dies
  3. status report (partitioned tolerant)  
